generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  email      String  @unique
  name       String?
  gender     Gender?
  location   String?
  role       Role    @default(USER)
  status     Status  @default(PENDING)
  password   String
  referCode  Int
  referPoint Int     @default(0)
  referBy    Int?

  //for AI
  goal              String?
  eatMeat           Boolean?
  lactoseIntolerant Boolean?
  anyAllergies      String[]       @default([])
  eatingStyle       String?
  caffeineIntake    String?
  sugarIntake       String?
  workOutDaysInWeek Int?
  workoutType       String?
  weight            Int?
  height            Int?
  dateOfBirth       String?
  conversation      Conversation[]

  fcmToken               String?
  image                  String?
  subscription           SubscriptionPlan @default(FREE)
  bibleCommunityStatus   CommunityStatus  @default(NONE)
  workoutCommunityStatus CommunityStatus  @default(NONE)
  financeCommunityStatus CommunityStatus  @default(NONE)
  connectAccountId       String?
  customerId             String?
  isVerified             Boolean          @default(false)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  receiver               Notifications[]  @relation("receiverDetails")
  sender                 Notifications[]  @relation("senderDetails")
  reviews                Review[]
  cart                   Cart[]
  favorite               Favorite[]
  post                   Post[]
  comment                Comment[]
}

model Otp {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  otp       Int
  expiry    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("otps")
}

//for chatBot
model Conversation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
  messages  Message[]
  createdAt DateTime  @default(now())
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String       @db.ObjectId
  sender         String
  content        String
  timestamp      DateTime     @default(now())
}

model Product {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  category           String
  name               String
  price              Float
  keyFeature         String?
  productDetails     String?
  productDescription String?
  size               String[]
  image              Json[]
  reviews            Review[]
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  Cart               Cart[]
  favorite           Favorite[]
}

model Cart {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  productId      String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productDetails Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Favorite {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  productId      String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productDetails Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  category  Community
  like      Int       @default(0)
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String?    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comment   Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String   @db.ObjectId
  senderId   String?  @db.ObjectId
  title      String
  body       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("receiverDetails", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User?    @relation("senderDetails", fields: [senderId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  TECHNICIAN
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Status {
  PENDING
  ACTIVE
  BLOCKED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Community {
  BIBLE
  WORKOUT
  FINANCE
}

enum CommunityStatus {
  NONE
  PENDING
  APPROVED
  BLOCKED
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
}
